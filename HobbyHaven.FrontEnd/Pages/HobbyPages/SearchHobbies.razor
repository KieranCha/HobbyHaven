@page "/search-hobbies"
@attribute [Authorize]
@layout MainLayout
@inject HttpClient HttpClient
@inject URIservice URIservice
@using HobbyHaven.Shared.DTOs.Hobbies


<MudText Typo="Typo.h2" Align="Align.Center"> Here's all the <span style="color:orange;font-weight:bold;font-style:italic">Hobbies</span> we've got!</MudText>
<MudDivider DividerType="DividerType.Middle" Class="my-6"/>


<MudPaper Class="pa-16 ma-2">
    <MudTable Items="@searchHobbies()" Loading="@(hobbies.Count==0)" LoadingProgressColor="Color.Warning">
        <ToolBarContent>
            <MudTextField Variant="Variant.Outlined" Label="Search" @bind-Value="searchQuery" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true"/>
        </ToolBarContent>

        <RowTemplate>
            <MudTd>
                <MudGrid>
                    <MudItem xs="4" sm="3">
                        @if (@context.HasImage)
                        {
                            <MudImage Src="@($"https://localhost:44357/api/images/hobbies/{@context.Id}")" Alt="Hobby image" Fluid="true" Width="125" />
                        }
                        else
                        {
                            <MudImage Src="https://localhost:44362/BluMojis/defaultLoad.jpg" Alt="Hobby image" Fluid="true" Width="125" />
                        }
                    </MudItem>
                    <MudItem >
                        <MudText Typo="Typo.h5" Style="line-height: 125px;"> @context.Name </MudText>
                    </MudItem>
                </MudGrid>
            </MudTd>
            <MudTd>
                <MudGrid Justify="Justify.FlexEnd">
                    <MudItem>
                        <MudButton EndIcon="@Icons.Material.Outlined.Info" Color="Color.Warning" Size="Size.Small" Variant="Variant.Outlined" Href="@constructURL(context.Id)">
                             Learn more 
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>


@code {
    List<DTOHobby> hobbies = new List<DTOHobby>();
    string searchQuery;

    protected override async Task OnInitializedAsync()
    {

        var response = await HttpClient.GetAsync($"{URIservice.APIaddress}api/hobbies/all");
        hobbies = await response.Content.ReadFromJsonAsync<List<DTOHobby>>();
    }

    private IEnumerable<DTOHobby> searchHobbies()
    {
        if (searchQuery == null && searchQuery != string.Empty) return hobbies;

        List<DTOHobby> revisedHobbies = new();
        searchQuery = searchQuery.ToLower();

        // checks each hobbies name and personality tags to check if they match the search query
        hobbies.ForEach(hobby =>
        {
            if (hobby.Name.ToLower().Contains(searchQuery))
            {
                revisedHobbies.Add(hobby);
            } else
            {
                bool found = false;
                hobby.PersonalityTags.ForEach(tag =>
                {
                    if (tag.Name.ToLower().Contains(searchQuery) && !found)
                    {
                        revisedHobbies.Add(hobby);
                        found = true;
                    }
                });
            }
        });
        return revisedHobbies;
        // return hobbies.Where(x => x.Name.ToLower().Contains(searchQuery.ToLower()) || x.PersonalityTags.Contains(searchQuery.ToLower()));
    }

    public string constructURL(Guid hobbyID)
    {
        return "/hobby?hobby="+hobbyID;
    }
}
