@page "/hobby"
@attribute [Authorize]
@layout MainLayout

@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject URIservice URIservice
@inject AuthenticationStateProvider AuthenticationStateProvider

@using HobbyHaven.Shared.DTOs.Hobbies


<MudGrid>
    <MudItem xs="2">
        @if (!hobby.HasImage)
        {
            <MudPaper Class="pa-2" Height="200" Width="200">
                <MudImage Src="https://localhost:44362/BluMojis/defaultLoad.jpg" Alt="Hobby image" Fluid="true"/>
            </MudPaper>
        }
        else
        {
            <MudPaper Class="pa-2" Height="200" Width="200">
                <MudImage Src="@hobbyImageSrc" Alt="Hobby image" Fluid="true"/>
            </MudPaper>
        }
    </MudItem>
    <MudItem xs="10">
        <MudPaper Height="300">
            <MudGrid Justify="Justify.FlexEnd">
                <MudItem xs="12" Class="pa-25 ma-2">
                    <MudText Typo="Typo.h1" Color="Color.Warning">@hobby.Name</MudText>
                </MudItem>
                <MudItem xs="3">
                    <MudButton EndIcon="@buttonIcon" Color="@buttonColour" FullWidth="true" Variant="Variant.Outlined" OnClick="((e)=> changeSubscribeState())">
                        @buttonText
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper>
            <MudText Typo="Typo.h6"> @hobby.Description </MudText>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string hobbyName { get; set; } = "hobby";

    DTOHobby? hobby = new()
        {
            Name = "",
            Description = "",
            HasImage = false
    };
    bool hobbySubscribed;
    string buttonText, buttonIcon, hobbyImageSrc;
    Color buttonColour;


    protected override async Task OnInitializedAsync()
    {

        var url = NavManager.ToAbsoluteUri(NavManager.Uri);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        if ((QueryHelpers.ParseQuery(url.Query).TryGetValue("hobby", out var _hobbyID)))
        {

            HttpResponseMessage responseHobby = await HttpClient.GetAsync($"{URIservice.APIaddress}api/hobbies/{_hobbyID}/view");
            if (!responseHobby.IsSuccessStatusCode) 
            {   
                Snackbar.Add("Hobby does not exsist, try again with valid hobbyID", Severity.Error);
                NavManager.NavigateTo("/search-hobbies");
            }
            hobby = await responseHobby.Content.ReadFromJsonAsync<DTOHobby>();
            hobbySubscribed = await subscribeState(_hobbyID);
            if (hobby.HasImage)
            {
                HttpResponseMessage responseImage = await HttpClient.GetAsync($"{URIservice.APIaddress}api/images/hobbies/{_hobbyID}");
                byte[] hobbyImageBytes = await responseImage.Content.ReadAsByteArrayAsync();
                string hobbyImageBase64 = Convert.ToBase64String(hobbyImageBytes);
                hobbyImageSrc = $"data:image/png;base64,{hobbyImageBase64}";
            }
        }
        else 
        {
            Snackbar.Add("No hobbyID provided, try again with valid hobbyID", Severity.Error);
            NavManager.NavigateTo("/search-hobbies");
        }
        buttonColour = hobbySubscribed ? Color.Error : Color.Success;
        buttonIcon = hobbySubscribed ? Icons.Material.Filled.Block : Icons.Material.Filled.Check;
        buttonText = hobbySubscribed ? "Unsubscribe" : "Subscribe";
    }

    public async Task<bool> subscribeState(string hobbyId)
    {
        // api/users/profile/hobbies/subscribeCheck/{hobbyID}
        var response = await HttpClient.GetAsync($"{URIservice.APIaddress}api/users/profile/hobbies/subscribeCheck/{hobbyId}");
        var toConvert = await response.Content.ReadAsStringAsync();

        return Boolean.Parse(toConvert);
    }

    public async Task changeSubscribeState()
    {
        // "api/users/profile/hobbies/{hobbyID}/remove"
        // "api/users/profile/hobbies/{hobbyID}/add"
        string method = (hobbySubscribed) ? "remove" : "add";
        string hobbyID = hobby.Id.ToString();

        var response = await HttpClient.GetAsync($"{URIservice.APIaddress}api/users/profile/hobbies/{hobbyID}/{method}");
        if (response.IsSuccessStatusCode)
        {
            hobbySubscribed = !hobbySubscribed;
            buttonColour = hobbySubscribed ? Color.Error : Color.Success;
            buttonIcon = hobbySubscribed ? Icons.Material.Filled.Block : Icons.Material.Filled.Check;
            buttonText = hobbySubscribed ? "Unsubscribe" : "Subscribe";
        }
    }
}
