@page "/hobbies"
@attribute [Authorize]
@inject NavigationManager NavManager
@inject HttpClient httpClient
@inject URIservice URIservice
@layout MainLayout

<PageTitle> Hobbies </PageTitle>
<MudGrid> 
    <MudItem Class="mb-8">
        <MudText Typo="Typo.h1"> Subscribed <span style="color:orange;font-weight:bold;font-style:italic">Hobbies</span> </MudText>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.FlexStart">
    <MudItem xs="8">
        <MudGrid Spacing="3" Justify="Justify.FlexStart">
            @if (subscribedHobbies.Count > 0)
            {
                @foreach (DTOHobby _hobby in subscribedHobbies)
                {
                    <MudItem xs="12">
                        <MudPaper Outlined="true">
                            <MudContainer>
                                <MudGrid>
                                    <MudItem xs="12" sm="3">
                                        @if (_hobby.HasImage)
                                        {
                                            <MudImage Src="@($"https://localhost:44357/api/images/hobbies/{_hobby.Id}")" Alt="Hobby image" Fluid="true" />
                                        }
                                        else
                                        {
                                            <MudImage Src="https://localhost:44362/BluMojis/defaultLoad.jpg" Alt="Hobby image" Fluid="true" />
                                        }
                                    </MudItem>
                                    <MudItem xs="12" sm="9">
                                        <MudGrid Justify="Justify.FlexEnd">
                                            <MudItem xs="12" sm="12">
                                                <MudText Typo="Typo.h6"> @_hobby.Name </MudText>
                                                <MudText Typo="Typo.subtitle1"> @_hobby.Description </MudText>
                                            </MudItem>
                                            <MudItem xs="12" sm="3">
                                                <MudButton EndIcon="@Icons.Material.Outlined.Info" Color="Color.Warning" FullWidth="true" Variant="Variant.Outlined" Href="@constructURL(_hobby.Id)">
                                                    Learn more 
                                                </MudButton>
                                                <MudButton EndIcon="@Icons.Material.Filled.Block" Color="Color.Error" FullWidth="true" Variant="Variant.Outlined" OnClick="@((e)=> unsubscribeHobby(_hobby))"> 
                                                    Unsubcribe 
                                                </MudButton>
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudGrid>
                            </MudContainer>
                        </MudPaper>
                    </MudItem>
                }
            }
            else {
                <MudItem xs="12">
                    <MudGrid Justify="Justify.Center">
                        <MudItem>
                            <MudImage Src="https://localhost:44362/BluMojis/withUncertainty.png" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Align="Align.Center" Typo="Typo.h3"> You're currently not subscribed to any hobbies! </MudText>
                            <MudText Align="Align.Center" Typo="Typo.h4"> Find some <MudLink Href="/search-hobbies" Typo="Typo.h4"> here! </MudLink></MudText>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
</MudGrid>
 
@code {
    List<DTOHobby>? subscribedHobbies = new() { };
    protected override async Task OnInitializedAsync()
    {
        // api/users/profile/hobbies/all
        HttpResponseMessage result = await httpClient.GetAsync($"{URIservice.APIaddress}api/users/profile/hobbies/all");
        if (result.IsSuccessStatusCode) subscribedHobbies = await result.Content.ReadFromJsonAsync<List<DTOHobby>>();
        else subscribedHobbies = new() { };
    }

    public string constructURL(Guid name)
    {
        return "/hobby?hobby=" + name;
    }
    public async void unsubscribeHobby(DTOHobby hobbyToRemove)
    {
        HttpResponseMessage response = await httpClient.GetAsync($"{URIservice.APIaddress}api/users/profile/hobbies/{hobbyToRemove.Id}/remove");
        if (response.IsSuccessStatusCode) subscribedHobbies.Remove(hobbyToRemove);
    }

    public async Task<string> getHobbyImage(DTOHobby hobby)
    {
        if (hobby.HasImage)
        {
            HttpResponseMessage responseImage = await httpClient.GetAsync($"{URIservice.APIaddress}api/images/hobbies/{hobby.Id}");
            byte[] hobbyImageBytes = await responseImage.Content.ReadAsByteArrayAsync();
            string hobbyImageBase64 = Convert.ToBase64String(hobbyImageBytes);
            return $"data:image/png;base64,{hobbyImageBase64}";
        }
        return "https://localhost:44362/BluMojis/defaultLoad.jpg";
    }

}
